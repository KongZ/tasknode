#!/usr/bin/env bash

##############################################################################
##
##  hypcode-task-node start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/.." >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="hypcode-task-node"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and HYPCODE_TASK_NODE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Dlog4j.configurationFile=./conf/log4j2.xml"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn ( ) {
    echo "$*"
}

die ( ) {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/lib/hypcode-task-node-0.0.1.jar:$APP_HOME/lib/jsp-api-2.2.jar:$APP_HOME/lib/jackson-core-2.8.8.jar:$APP_HOME/lib/jackson-databind-2.8.8.jar:$APP_HOME/lib/jackson-annotations-2.8.8.jar:$APP_HOME/lib/redisson-3.5.4.jar:$APP_HOME/lib/guava-21.0.jar:$APP_HOME/lib/jersey-container-grizzly2-http-2.26.jar:$APP_HOME/lib/jersey-container-grizzly2-servlet-2.26.jar:$APP_HOME/lib/jersey-media-moxy-2.26.jar:$APP_HOME/lib/jersey-media-json-jackson-2.26.jar:$APP_HOME/lib/jersey-hk2-2.26.jar:$APP_HOME/lib/slf4j-api-1.7.25.jar:$APP_HOME/lib/log4j-core-2.9.1.jar:$APP_HOME/lib/log4j-slf4j-impl-2.9.1.jar:$APP_HOME/lib/log4j-1.2-api-2.9.1.jar:$APP_HOME/lib/slf4j-log4j12-1.7.25.jar:$APP_HOME/lib/netty-common-4.1.15.Final.jar:$APP_HOME/lib/netty-codec-4.1.15.Final.jar:$APP_HOME/lib/netty-buffer-4.1.15.Final.jar:$APP_HOME/lib/netty-transport-4.1.15.Final.jar:$APP_HOME/lib/netty-handler-4.1.15.Final.jar:$APP_HOME/lib/cache-api-1.0.0.jar:$APP_HOME/lib/reactor-stream-2.0.8.RELEASE.jar:$APP_HOME/lib/jackson-dataformat-yaml-2.7.9.jar:$APP_HOME/lib/zero-allocation-hashing-0.8.jar:$APP_HOME/lib/byte-buddy-1.6.14.jar:$APP_HOME/lib/jodd-bean-3.7.1.jar:$APP_HOME/lib/javax.inject-2.5.0-b42.jar:$APP_HOME/lib/grizzly-http-server-2.4.0.jar:$APP_HOME/lib/jersey-common-2.26.jar:$APP_HOME/lib/jersey-server-2.26.jar:$APP_HOME/lib/javax.ws.rs-api-2.1.jar:$APP_HOME/lib/jersey-container-servlet-2.26.jar:$APP_HOME/lib/grizzly-http-servlet-2.4.0.jar:$APP_HOME/lib/jersey-entity-filtering-2.26.jar:$APP_HOME/lib/org.eclipse.persistence.moxy-2.6.4.jar:$APP_HOME/lib/jackson-module-jaxb-annotations-2.8.4.jar:$APP_HOME/lib/hk2-locator-2.5.0-b42.jar:$APP_HOME/lib/log4j-api-2.9.1.jar:$APP_HOME/lib/netty-resolver-4.1.15.Final.jar:$APP_HOME/lib/reactor-core-2.0.8.RELEASE.jar:$APP_HOME/lib/snakeyaml-1.15.jar:$APP_HOME/lib/jodd-core-3.7.1.jar:$APP_HOME/lib/grizzly-http-2.4.0.jar:$APP_HOME/lib/javax.annotation-api-1.2.jar:$APP_HOME/lib/osgi-resource-locator-1.0.1.jar:$APP_HOME/lib/jersey-client-2.26.jar:$APP_HOME/lib/jersey-media-jaxb-2.26.jar:$APP_HOME/lib/validation-api-1.1.0.Final.jar:$APP_HOME/lib/jersey-container-servlet-core-2.26.jar:$APP_HOME/lib/org.eclipse.persistence.core-2.6.4.jar:$APP_HOME/lib/javax.json-1.0.4.jar:$APP_HOME/lib/aopalliance-repackaged-2.5.0-b42.jar:$APP_HOME/lib/hk2-api-2.5.0-b42.jar:$APP_HOME/lib/hk2-utils-2.5.0-b42.jar:$APP_HOME/lib/javassist-3.22.0-CR2.jar:$APP_HOME/lib/reactive-streams-1.0.0.jar:$APP_HOME/lib/grizzly-framework-2.4.0.jar:$APP_HOME/lib/org.eclipse.persistence.asm-2.6.4.jar:$APP_HOME/lib/javax.inject-1.jar:$APP_HOME/lib/javax.servlet-api-4.0.0-b07.jar

# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin, switch paths to Windows format before running java
if $cygwin ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=$((i+1))
    done
    case $i in
        (0) set -- ;;
        (1) set -- "$args0" ;;
        (2) set -- "$args0" "$args1" ;;
        (3) set -- "$args0" "$args1" "$args2" ;;
        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Split up the JVM_OPTS And HYPCODE_TASK_NODE_OPTS values into an array, following the shell quoting and substitution rules
function splitJvmOpts() {
    JVM_OPTS=("$@")
}
eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $HYPCODE_TASK_NODE_OPTS


exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" co.hypcode.tasknode.Application "$@"
